#include <HardwareSerial.h>
#include <FPM.h>
#include <WiFi.h>
#include <HTTPClient.h>

//**********NETWORK CREDENTIALS***********//
const char* ssid = "Winterfell";
const char* password =  "kinginthenorth";

//************COMMUNICATION INFO***************//
String postData=""; // post array that will be send to the website

/* select UART1 */
HardwareSerial fserial(1);

FPM finger(&fserial);
FPM_System_Params params;

#define BUFF_SZ     768

uint8_t template_buffer[BUFF_SZ];

//***************************SETUP*********************//

void setup(void) {
    
    Serial.begin(9600);
    
    pinMode(2, OUTPUT);
    digitalWrite(2, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(1000);
    digitalWrite(2, LOW);   // turn the LED off (LOW is the voltage level)
    
    delay(4000);   //Delay needed before calling the WiFi.begin
 
    WiFi.begin(ssid, password); 
 
    while (WiFi.status() != WL_CONNECTED) { //Check for the connection
      delay(1000);
      Serial.println("Connecting to WiFi..");
    }
 
    Serial.println("Connected to the WiFi network");
    digitalWrite(2, HIGH);   // turn the LED on (HIGH is the voltage level)
    
    Serial.println("ENROLL test");
    
    digitalWrite(2, LOW);    // turn the LED off by making the voltage LOW
    
    /* RX = IO16, TX = IO17 */
    fserial.begin(57600, SERIAL_8N1, 16, 17);
    
    digitalWrite(2, HIGH);   // turn the LED on (HIGH is the voltage level)
    
    if (finger.begin()) {
        finger.readParams(&params);
        Serial.println("Found fingerprint sensor!");
        Serial.print("Capacity: "); Serial.println(params.capacity);
        Serial.print("Packet length: "); Serial.println(FPM::packet_lengths[params.packet_len]);
    } else {
        Serial.println("Did not find fingerprint sensor :(");
        while (1) yield();
    }

    /* just to find out if your sensor supports the handshake command 
    if (finger.handshake()) {
        Serial.println("Handshake command is supported.");
    }
    else {
        Serial.println("Handshake command not supported.");
    }*/
}

//******************************LOOP**************************//

void loop()
{
//    Serial.println("Send any character to search for a print...");
//    while (Serial.available() == 0) yield(); //!?
    //--------------Search Database----------//
    uint16_t fid = search_database();
    while (Serial.read() != -1); //!?
}

//*****************************SEARCH DATABASE FUNCTION********************//
int search_database(void) {
    int16_t p = -1;

    /* first get the finger image */
    Serial.println("Waiting for valid finger");
    while (p != FPM_OK) {
        p = finger.getImage();
        switch (p) {
            case FPM_OK:
                Serial.println("Image taken");
                break;
            case FPM_NOFINGER:
                Serial.println(".");
                break;
            case FPM_PACKETRECIEVEERR:
                Serial.println("Communication error");
                break;
            case FPM_IMAGEFAIL:
                Serial.println("Imaging error");
                break;
            case FPM_TIMEOUT:
                Serial.println("Timeout!");
                break;
            case FPM_READ_ERROR:
                Serial.println("Got wrong PID or length!");
                break;
            default:
                Serial.println("Unknown error");
                break;
        }
        yield();
    }

    /* convert it */
    p = finger.image2Tz();
    switch (p) {
        case FPM_OK:
            Serial.println("Image converted");
            break;
        case FPM_IMAGEMESS:
            Serial.println("Image too messy");
            return p;
        case FPM_PACKETRECIEVEERR:
            Serial.println("Communication error");
            return p;
        case FPM_FEATUREFAIL:
            Serial.println("Could not find fingerprint features");
            return p;
        case FPM_INVALIDIMAGE:
            Serial.println("Could not find fingerprint features");
            return p;
        case FPM_TIMEOUT:
            Serial.println("Timeout!");
            return p;
        case FPM_READ_ERROR:
            Serial.println("Got wrong PID or length!");
            return p;
        default:
            Serial.println("Unknown error");
            return p;
    }

    /* search the database for the converted print */
    uint16_t fid, score;
    p = finger.searchDatabase(&fid, &score);
    
    /* now wait to remove the finger, though not necessary; 
       this was moved here after the search because of the R503 sensor, 
       which seems to wipe its buffers after each scan */
    Serial.println("Remove finger");
    while (finger.getImage() != FPM_NOFINGER) {
        delay(500);
    }
    Serial.println();
    
    if (p == FPM_OK) {
        Serial.println("Found a print match!");
    } else if (p == FPM_PACKETRECIEVEERR) {
        Serial.println("Communication error");
        return p;
    } else if (p == FPM_NOTFOUND) {
        Serial.println("Did not find a match");
        return p;
    } else if (p == FPM_TIMEOUT) {
        Serial.println("Timeout!");
        return p;
    } else if (p == FPM_READ_ERROR) {
        Serial.println("Got wrong PID or length!");
        return p;
    } else {
        Serial.println("Unknown error");
        return p;
    }

    // found a match!
    Serial.print("Found ID #"); Serial.print(fid);
    Serial.print(" with confidence of "); Serial.println(score);
    //----------------Upload-----------------//
    upload_fid(fid);
}


//*********************************UPLOAD FINGERPRINT ID******************************//

void upload_fid(uint16_t fid){
  
  if(WiFi.status()== WL_CONNECTED){   //Check WiFi connection status
 
   HTTPClient http;

   postData = "fid=" + String(fid);
 
   http.begin("http://192.168.0.102/attendance/test.php");  //Specify destination for HTTP request
   http.addHeader("Content-Type", "application/x-www-form-urlencoded");             //Specify content-type header
   Serial.println(postData);
 
   int httpResponseCode = http.POST(postData);   //Send the actual POST request
   Serial.println("Data posted");
 
   if(httpResponseCode>0){
 
    String response = http.getString();                       //Get the response to the request
 
    Serial.println(httpResponseCode);   //Print return code
    Serial.println(response);           //Print request answer
 
   }else{
 
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);
 
   }
 
   http.end();  //Free resources
 
 }else{
 
    Serial.println("Error in WiFi connection");   
 
 }
 
  delay(10000);  //Send a request every 10 seconds
}